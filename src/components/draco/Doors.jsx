
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.4 .\public\doors-draco.glb
*/

import React, { useEffect, useState } from 'react'
import { useGLTF } from '@react-three/drei'

export function Doors(props) {
  const { nodes, materials } = useGLTF('/doors-draco.glb')

  const handleHover = (e) => {
    if (e.object.material.color.g === 1)
      e.object.material.color.set({ r: 1, g: 0.5, b: 0.5, isColor: true })
    else
      e.object.material.color.set({ r: 1, g: 1, b: 1, isColor: true })
  }

  return (
    <group {...props} dispose={null}>
      <mesh 
        onPointerOver={(e) => {e.stopPropagation(); handleHover(e)}}
        onPointerOut={(e) => {e.stopPropagation(); handleHover(e)}}
        geometry={nodes.StoneGateway003.geometry} material={materials['monastery_stone_floor.003']} position={[7.842, 3.889, 0.77]} rotation={[Math.PI / 2, 0, 1.488]} />
      <mesh 
        onPointerOver={(e) => {e.stopPropagation(); handleHover(e)}}
        onPointerOut={(e) => {e.stopPropagation(); handleHover(e)}}
        geometry={nodes.StoneGateway002.geometry} material={materials['monastery_stone_floor.002']} position={[6.551, 3.889, 4.439]} rotation={[Math.PI / 2, 0, 2.482]} />
      <mesh 
        onPointerOver={(e) => {e.stopPropagation(); handleHover(e)}}
        onPointerOut={(e) => {e.stopPropagation(); handleHover(e)}}
        geometry={nodes.StoneGateway001.geometry} material={materials['monastery_stone_floor.001']} position={[6.551, 3.889, -3.035]} rotation={[Math.PI / 2, 0, 0.801]} />
    </group>
  )
}

useGLTF.preload('/doors-draco.glb')
