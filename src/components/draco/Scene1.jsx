/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.4 .\public\scene1.glb
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { MathUtils } from 'three'

const Door1 = ({ nodes, materials }) => {
  const ref = useRef()
  const [hovered, setHovered] = useState(false)
  const [selected, setSelected] = useState(false)

  useFrame(() => {
    ref.current.position.z = hovered
      ? MathUtils.lerp(ref.current.position.z, ref.current.position.z - (ref.current.position.z + 1) % 1, 0.025)
      : MathUtils.lerp(ref.current.position.z, -8.927, 0.025)
  })

  return (
      <mesh 
        ref={ref}
        onPointerDown={() => {
          setSelected(!selected)
        }}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)} 
        geometry={nodes.StoneGateway003.geometry} material={materials['monastery_stone_floor.003']} position={[-0.02, 2.529, -8.927]} rotation={[-Math.PI / 2, 0, 0.033]} scale={-1} />
  )
}

const Door2 = ({ nodes, materials }) => {
  const ref = useRef()
  const [hovered, setHovered] = useState(false)
  const [selected, setSelected] = useState(false)

  useFrame(() => {
    ref.current.position.z = hovered
      ? MathUtils.lerp(ref.current.position.z, ref.current.position.z - (ref.current.position.z + 0.5) % 0.5, 0.025)
      : MathUtils.lerp(ref.current.position.z, -7.247, 0.025)
    ref.current.position.x = hovered
      ? MathUtils.lerp(ref.current.position.x, ref.current.position.x - (ref.current.position.x + 0.5) % 0.5, 0.025)
      : MathUtils.lerp(ref.current.position.x, -4.658, 0.025)
  })

  return (
    <mesh 
        ref={ref}
        onPointerDown={() => {
          setSelected(!selected)
        }}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)} 
        geometry={nodes.StoneGateway002.geometry} material={materials['monastery_stone_floor.002']} position={[-4.658, 2.529, -7.247]} rotation={[-Math.PI / 2, 0, 0.816]} scale={-1} />
  )
}

const Door3 = ({ nodes, materials }) => {
  const ref = useRef()
  const [hovered, setHovered] = useState(false)
  const [selected, setSelected] = useState(false)

  useFrame(() => {
      ref.current.position.z = hovered
        ? MathUtils.lerp(ref.current.position.z, ref.current.position.z - (ref.current.position.z + 0.5) % 0.5, 0.025)
        : MathUtils.lerp(ref.current.position.z, -7.44, 0.025)
      ref.current.position.x = hovered
        ? MathUtils.lerp(ref.current.position.x, ref.current.position.x - (ref.current.position.x + 0.5) % 0.5, 0.025)
        : MathUtils.lerp(ref.current.position.x, 4.918, 0.025)
    })

  return (
    <mesh 
        ref={ref}
        onPointerDown={() => {
          setSelected(!selected)
        }}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)} 
        geometry={nodes.StoneGateway001.geometry} material={materials['monastery_stone_floor.001']} position={[4.918, 2.529, -7.44]} rotation={[-Math.PI / 2, 0, -0.741]} scale={-1} />
  )
}

export function Model(props) {
  const { nodes, materials } = useGLTF('/scene1.glb')
  
  return (
    <group {...props} dispose={null}>
      <Door1 nodes={nodes} materials={materials} />
      <Door2 nodes={nodes} materials={materials} />
      <Door3 nodes={nodes} materials={materials} />
      <group position={[1.507, -19.403, -24.072]} rotation={[0.572, 0.017, 3.126]} scale={-0.019}>
        <mesh geometry={nodes.EXPORT_GOOGLE_SAT_WM001_1.geometry} material={materials.coast_sand_rocks_02} />
        <mesh geometry={nodes.EXPORT_GOOGLE_SAT_WM001_2.geometry} material={materials.coast_sand_rocks_02} />
      </group>
      <mesh geometry={nodes.dome.geometry} material={materials['Material.001']} position={[-0.128, 3.839, 2.079]} rotation={[-Math.PI / 2, 0, 1.571]} scale={-0.083} />
      <group position={[-1.239, -20.608, -15.702]} rotation={[-3.021, -0.029, 0.059]} scale={-0.019}>
        <mesh geometry={nodes.EXPORT_GOOGLE_SAT_WM004.geometry} material={materials['coast_sand_rocks_02.003']} />
        <mesh geometry={nodes.EXPORT_GOOGLE_SAT_WM004_1.geometry} material={materials['coast_sand_rocks_02.003']} />
      </group>
    </group>
  )
}

useGLTF.preload('/scene1.glb')
